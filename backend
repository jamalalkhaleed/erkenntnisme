import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import { Pool } from "pg";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { Server } from "socket.io";
import http from "http";
import * as tf from "@tensorflow/tfjs";
import OpenAI from "openai";
import anomalyDetection from "./ai/anomalyDetection.js";
import selfHealing from "./ai/selfHealing.js";
import selfLearning from "./ai/selfLearning.js";
import automation from "./ai/automation.js";

dotenv.config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });
const port = process.env.PORT || 5000;
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

app.use(cors());
app.use(helmet());
app.use(express.json());

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});
app.use(limiter);

// Real-time AI-driven user engagement
io.on("connection", (socket) => {
  console.log("User connected");
  socket.on("disconnect", () => console.log("User disconnected"));
});

// AI-driven chat endpoint with advanced NLP
app.post("/api/chat", async (req, res) => {
  const { message, userId } = req.body;
  if (!message) return res.status(400).json({ error: "Message is required" });

  try {
    const response = await openai.createChatCompletion({
      model: "gpt-4",
      messages: [{ role: "user", content: message }],
    });
    const aiResponse = response.data.choices[0].message.content;
    res.json({ reply: aiResponse });
  } catch (error) {
    res.status(500).json({ error: "AI processing error" });
  }
});

// AI-driven fraud detection & security monitoring
app.use(async (req, res, next) => {
  try {
    const threatDetected = await anomalyDetection.checkRequest(req);
    if (threatDetected) return res.status(403).json({ error: "Suspicious activity detected" });
    next();
  } catch (error) {
    next(error);
  }
});

// AI-driven self-learning & adaptive intelligence
app.use(async (req, res, next) => {
  try {
    await selfLearning.improveAI();
    next();
  } catch (error) {
    next(error);
  }
});

// AI-driven self-healing module
app.use(async (req, res, next) => {
  try {
    await selfHealing.monitorAndFix();
    next();
  } catch (error) {
    next(error);
  }
});

// AI-driven automation: Initiate calls, texts, and bookings
app.post("/api/automation/trigger", async (req, res) => {
  const { action, userId, details } = req.body;
  try {
    const result = await automation.executeAction(action, userId, details);
    res.json({ message: "Action executed successfully", result });
  } catch (error) {
    res.status(500).json({ error: "Automation execution error" });
  }
});

// Gamification system
app.post("/api/gamification/progress", async (req, res) => {
  const { userId, progress } = req.body;
  try {
    await pool.query("UPDATE users SET progress = $1 WHERE id = $2", [progress, userId]);
    res.json({ message: "Progress updated successfully" });
  } catch (error) {
    res.status(500).json({ error: "Database error" });
  }
});

// ERP & CRM integration
app.get("/api/business/insights", async (req, res) => {
  try {
    const insights = await pool.query("SELECT * FROM business_insights ORDER BY created_at DESC");
    res.json(insights.rows);
  } catch (error) {
    res.status(500).json({ error: "Database error" });
  }
});

server.listen(port, () => console.log(`Server running on port ${port}`));
